services:
  keylime-verifier:
    build:
      context: ./docker/fedora/
      dockerfile: keylime_py.Dockerfile
    image: keylime_py
    hostname: 'keylime-verifier'
    user: root
    networks:
      - keylime-network
    volumes:
      - secure-volume:/var/lib/keylime
      - ./config/verifier.conf:/etc/keylime/verifier.conf
    ports:
      - "8892:8892"
    environment:
      - KEYLIME_database_url=sqlite:////var/lib/keylime/keylime.db
    command: |
      bash -c "
      dnf install -y openssl && dnf clean all && 
      mkdir -p /etc/keylime && mkdir -p /usr/share/keylime/templates && mkdir -p /var/lib/keylime/cv_ca && touch /etc/keylime/logging.conf && 
      if [ ! -f /var/lib/keylime/cv_ca/server-cert.crt ]; then
        cd /var/lib/keylime/cv_ca && 
        openssl req -x509 -newkey rsa:2048 -keyout server-private.pem -out server-cert.crt -sha256 -days 365 -nodes -subj '/CN=keylime-verifier' &&
        openssl req -x509 -newkey rsa:2048 -keyout ca-private.pem -out cacert.crt -sha256 -days 365 -nodes -subj '/CN=keylime-ca' &&
        openssl req -newkey rsa:2048 -keyout client-private.pem -out client-req.pem -subj '/CN=keylime-client' -nodes &&
        openssl x509 -req -in client-req.pem -CA cacert.crt -CAkey ca-private.pem -out client-cert.crt -sha256 -days 365 -CAcreateserial
      fi && 
      # Ensure verifier stays in foreground
      exec /usr/local/bin/keylime_verifier
      "

  keylime-registrar:
    build:
      context: ./docker/fedora/
      dockerfile: keylime_py.Dockerfile
    image: keylime_py
    hostname: 'keylime-registrar'
    user: root
    networks:
      - keylime-network
    volumes:
      - secure-volume:/var/lib/keylime
    ports:
      - "8891:8891"
      - "8890:8890"
    environment:
      - KEYLIME_database_url=sqlite:////var/lib/keylime/reg_data.sqlite
    command: |
      bash -c "
      until [ -f /var/lib/keylime/cv_ca/client-cert.crt ]; do
        echo 'Waiting for certificate to be generated...'
        sleep 2
      done
      mkdir -p /etc/keylime
      mkdir -p /usr/share/keylime/templates
      touch /etc/keylime/logging.conf
      
      cat > /tmp/fixed_registrar.py << 'EOF'
      #!/usr/bin/env python3

      import os
      import sys
      from pkg_resources import load_entry_point

      # Monkey patch the problematic function in keylime models
      try:
          from keylime.models.base import db
          original_make_engine = db.make_engine
          
          def patched_make_engine(config_key):
              try:
                  return original_make_engine(config_key)
              except ValueError as e:
                  if "not enough values to unpack" in str(e):
                      print("Patching pool_size and max_overflow configuration")
                      # Set default values
                      db.engine = db.create_engine(
                          db.get_c_database_url(config_key),
                          pool_size=20,
                          max_overflow=10
                      )
                      return db.engine
                  raise
            
          # Apply the patch
          db.make_engine = patched_make_engine
          print("Successfully applied database connection patch")
      except ImportError as e:
          print(f"Failed to import required module: {e}")
          sys.exit(1)

      # Start the registrar
      try:
          sys.exit(load_entry_point('keylime==7.12.1', 'console_scripts', 'keylime_registrar')())
      except Exception as e:
          print(f"Error starting registrar: {e}")
          sys.exit(1)
      EOF

      chmod +x /tmp/fixed_registrar.py
      exec python3 /tmp/fixed_registrar.py
      
      # Start registrar in foreground to keep container running
      exec /usr/local/bin/keylime_registrar
      "

  keylime-agent:
    build:
      context: ./docker/fedora/
      dockerfile: keylime_rust.Dockerfile
    image: keylime_rust
    hostname: 'keylime-agent'
    user: root
    privileged: true
    volumes:
      - ./target/debug/:/rust-keylime
      - secure-volume:/var/lib/keylime
    # Create a named network so containers can properly resolve each other
    networks:
      - keylime-network
    depends_on:
      - keylime-registrar
      - keylime-verifier
    environment:
      - TCTI=tabrmd:bus_type=system
      - RUST_KEYLIME_SKIP_SECURE_MOUNT=1
      - RUST_BACKTRACE=1
      - RUST_LOG=keylime_agent=debug,keylime=debug
    command:
      - /bin/bash
      - -c
      - |
        mkdir -p /tmp/tpmdir
        mkdir -p /var/lib/keylime
        # Create keylime user and group
        useradd -r keylime || echo "User may already exist"
        # Set up dbus
        rm -rf /var/run/dbus
        mkdir /var/run/dbus
        dbus-daemon --system
        
        # Set up TPM emulator
        swtpm_setup --tpm2 \
            --tpmstate /tmp/tpmdir \
            --createek --decryption --create-ek-cert \
            --create-platform-cert \
            --display
        swtpm socket --tpm2 \
            --tpmstate dir=/tmp/tpmdir \
            --flags startup-clear \
            --ctrl type=tcp,port=2322 \
            --server type=tcp,port=2321 \
            --daemon
        sleep 2
        tpm2-abrmd \
            --logger=stdout \
            --tcti=swtpm: \
            --allow-root \
            --flush-all &
        sleep 2
        
        # Install netcat if needed
        dnf install -y nc || true
        
        # Wait for registrar to be available
        echo "Waiting for registrar to be available at keylime-registrar:8891..."
        
        # First ensure DNS resolution works 
        until getent hosts keylime-registrar; do
          echo "DNS resolution for keylime-registrar not working yet, waiting..."
          sleep 3
        done
        
        # Then check for port availability
        until nc -z keylime-registrar 8891; do
          echo "Registrar port not available yet, waiting..."
          sleep 5
        done
        echo "Registrar available, starting agent..."
        
        # Now start the agent
        exec /usr/bin/keylime_agent

volumes:
  secure-volume:

networks:
  keylime-network:
    driver: bridge